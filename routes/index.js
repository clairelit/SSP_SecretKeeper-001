var express = require('express');
var router = express.Router();
var bodyParser = require('body-parser');

var mongoClient = require('mongodb').MongoClient;


// If I am running locally then use 'mongodb://localhost:27017/test' otherwise
// look for the environment variable
var url = process.env.CUSTOMCONNSTR_MongoDB || 'mongodb://dbuserclaire:litclonmel@ds064278.mlab.com:64278/MongoLab-f';

//This is a route that accepts details from the form for registering
router.post('/register', function(req, res, next){
  var db = req.db;
  var userName = req.body.username;
  var userPassword = req.body.password;

  //This is getting the userTable from the database
  var collection=db.get('userTable');

  //This is inserting the object into the database
  //The data for the object is collected from the form using the above variables
  //i.e userName and userPassword
  collection.insert({
    "username": userName,
    "password": userPassword
}, function(err, doc){
  if(err){
    res.send("There was a problem adding information to the Database");
  }
  else{
    //This sets the session userName based on the userName from the form
    //Setting the user session here, saves the user from having to log in immediately after they have registered.
    //i.e. It brings them straght to their secrets page.
    req.session.userName = userName;
    console.log(req.session.userName);
    res.redirect('/');
  }
});
});


//When the user clicks the register link, this renders the register page for them
router.get('/register', function(req, res, next){
  res.render('register');
});


//This is the first route the user will implement, even though they don't know it
//This checks for a session.  If there is no session, they are sent back to the log in page
//But if there is a session, they are redirected to the mySecrets route, which gets their
//secrets out of the database and renders their secrets page
router.get('/', function(req, res, next){

   if(req.session.userName === "undefined" || req.session.userName == null){
    res.render('login');
  }
  else{
    res.redirect("/mySecrets");
  }
});



//This is a route that accepts the information when a user creates a new secret.
//It is added to the database and the user is redirected/sent back to their secrets page
router.post('/addNewSecret', function(req, res, next){
  var db = req.db;
  console.log(req.session.userName);
  var author = req.session.userName;
  var secretText = req.body.secretText;
  var collection = db.get('secretTable');

  collection.insert({
    "author": author,
    "secretText": secretText
  }, function(err, doc){
  if(err){
    res.send("There was a problem adding the secret to the Database");
  }
  else{
    res.redirect('/');
  }
  });
});


//This is a route that identifies the mongoDB autogenerated ID
//from the query and uses this id to tell the DB which secret to delete.
//It then sends the user back to their secrets page.
router.get('/delete', function (req, res, next){
  console.log("Deleting secret" + req.query.id);
  var idForDelete = (req.query.id);
  console.log(idForDelete);
  var db=req.db;
  var collection=db.get('secretTable');
  collection.remove({_id: idForDelete},{},function(e, docs)
  {
  res.redirect('/mySecrets');
});

});



router.post('/edit', function(req, res, next){
	var idForEdit = req.body.id;
	var newText = req.body.newText;
  console.log(req.body.newText);
	var db = req.db;
	var collection = db.get('secretTable');
	collection.update(
    { _id: idForEdit },
    {"secretText": newText},
		{
			upsert: false,
      multi: false
		}
	)
  res.redirect('/');
});





//This is where the requests are sent by the router.
//If the router just receives a get request with /login, use the function below
//This is the file that handles all of the requests.
/* GET home page. */
router.get('/login', function(req, res, next){
  res.render('login');
});

//This is a very important route.
//It gets all the secrets from the DB
//I made sure that when a secret was created, the name of the author was sent in
//so that this information could be used to pull out their secrets only from the DB
//I did this in this route by setting a variable to point to the currently logged in user
//based on what is in the session
//This is the particular route where the secrets page is being rendered, and
//the information from the DB is being passed in to be rendered by the jade engine
router.get('/mySecrets', function(req, res, next){
  var currentUser = req.session.userName;
  var db=req.db;
  var collection=db.get('secretTable');
  collection.find({author: currentUser},{},function(e, docs){
  res.render('mySecrets', {secrets: docs});
});
});




//Adding a route to handle a post request
//This checks the DB for users that match the name entered from the login form
//These are pulled from the DB and the passwords are checked against each other and
//if it is successful, the session is set and the user is sent to their secrets page,
//otherwise they are sent to their login page.
router.post('/login', function(req, res, next){
  var enteredUserName = req.body.userName;
  //console.log(enteredUserName);
  //console.log(req.body.userName);
  var enteredPassword = req.body.password;
  var db = req.db;
  var collection = db.get('userTable');
  collection.find({username: enteredUserName},{},function(e, docs){
    //if(!docs.username){
      //res.render('wrongLogin');
    //}
    //the above 3 lines (if statement), seemed to work for a time,
    //to check if the username even existed in the database, but they
    //caused a lot of problems (Breaking the app etc), and the end result is,
    //it seems to work again without them.
    for(var i in docs){
      if(docs[i].password == enteredPassword){
        var userName = req.body.userName;
        req.session.userName = userName;
        res.redirect('/mySecrets');
      }
      else{
        res.render('wrongLogin');
      }
    }
});
});


// Logout endpoint
//This logs the user out of the session by calling the session method "destroy",
//and redirects to the ("/") route which then sees that there is no longer session and then sends the user back to the log in page.
router.get('/logout', function (req, res, next) {
  req.session.destroy();
  res.redirect('/');
});


module.exports = router;
